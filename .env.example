################################################################################
# LLEMONSTACK .ENV CONFIG
################################################################################

# =============================================
# GLOBAL VARIABLES
# =============================================

# OpenAI API Key
# You can get one at https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key



# =============================================
# OLLAMA & LOCAL LLM CONFIG
# =============================================

# Ollama Host
# Set OLLAMA_HOST if using a different Ollama endpoint.
# If not set, the start script will auto configure based on ENABLE_OLLAMA settings.
# OLLAMA_HOST=host.docker.internal:11434

# Local LLM Config
# Uncomment LOCAL_LLM_OPENAI_API_BASE_URL below to enable a local LLM provider.
# Used by services like OpenWebUI to connect to a local LLM provider.
# Set to 1234 for LM Studio
# Set to 4891 for GPT4All
# Set to 11434 for Ollama
# LOCAL_LLM_OPENAI_HOST_PORT=1234 # LM Studio
# LOCAL_LLM_OPENAI_API_BASE_URL=http://host.docker.internal:${LOCAL_LLM_OPENAI_HOST_PORT}/v1
# LOCAL_LLM_OPENAI_API_KEY=sk-1234 # Only needed if local LLM provider requires an API key



################################################################################
# SERVICES CONFIG
# This section contains individual service configuration.
# See the cooresponding docker-compose.yaml file for more options per service.
################################################################################

# =============================================
# SUPABASE CONFIG
# See
# - services/supabase/docker-compose.yaml
# - services/supabase/config.env
# =============================================

# Hostname to use within the stack for services to connect to postgres.
# Host 'db' is the actual postgres container.
# Host 'supavisor' is the supabase supervisor/pooler proxy service for postgres.
# Use 'supavisor' whenever possible. Both use the same postgres port.
# When connecting to supavisor, the tenant needs to be appended to the username.
# e.g. postgres://USER.TENANT_ID:PASSWORD@HOST:5432/
POSTGRES_HOST_INTERNAL=supavisor # Host for services in the stack
POSTGRES_PORT=5432
POSTGRES_TENANT=llemonstack # Tenant is required when connecting via supavisor
# Suffix to add to postgres users when connecting via supavisor
POSTGRES_USER_TENANT_SUFFIX=.${POSTGRES_TENANT} # Added in docker-compose.yaml

# Password for the main postgres user
POSTGRES_PASSWORD= # Generated by init script
# Default postgres user is "postgres" and is not configurable.

# To login to the supabase dashboard:
SUPABASE_DASHBOARD_USERNAME=supabase
SUPABASE_DASHBOARD_PASSWORD= # Set by init script

# Supabase Secrets - YOU MUST CHANGE THESE BEFORE DEPLOYING TO PRODUCTION
# The default values are insecure but will work for local development.
# See https://supabase.com/docs/guides/self-hosting/docker#securing-your-services
SUPABASE_JWT_SECRET= # Generated by init script
SUPABASE_ANON_KEY= # Generated by init script
SUPABASE_SERVICE_ROLE_KEY= # Generated by init script

# Encryption key for supabase vault
SUPABASE_VAULT_ENC_KEY= # Generated by init script




# =============================================
# NEO4J CONFIG
# =============================================

# Neo4j shared settings
NEO4J_URI=bolt://neo4j:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD= # Generated by init script



# =============================================
# N8N CONFIG
# See
# - services/n8n/docker-compose.yaml
# - https://docs.n8n.io/hosting/configuration/environment-variables/
# =============================================

# Postgres settings for n8n
N8N_POSTGRES_HOST=${POSTGRES_HOST_INTERNAL}
N8N_POSTGRES_USER=postgres
N8N_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
N8N_POSTGRES_SCHEMA=service_n8n

# Set these to long and secure random strings
N8N_ENCRYPTION_KEY= # Generated by init script
N8N_USER_MANAGEMENT_JWT_SECRET= # Generated by init script

# Timezone for n8n
# GENERIC_TIMEZONE=America/Los_Angeles

# n8n log level: info | warn | error | debug
# N8N_LOG_LEVEL=info

# OpenTelemetry settings
# Set N8N_OTEL_SDK_DISABLED to false to enable OpenTelemetry for n8n
N8N_OTEL_SDK_DISABLED=true
# Base endpoint for OpenTelemetry
N8N_OTEL_EXPORTER_OTLP_ENDPOINT=https://api.honeycomb.io
# Honeycomb settings for OpenTelemetry in n8n container
HONEYCOMB_API_KEY=your-honeycomb-api-key
N8N_OTEL_EXPORTER_OTLP_HEADERS=x-honeycomb-team=${HONEYCOMB_API_KEY}



# =============================================
# ZEP CONFIG
# See
# - services/zep/docker-compose.yaml
# - services/zep/config.env
# =============================================

# Postgres settings for Zep
# If not set, the default values will be used.
ZEP_POSTGRES_USER= # Generated by init script
ZEP_POSTGRES_PASSWORD= # Generated by init script
ZEP_POSTGRES_SCHEMA=service_zep
ZEP_POSTGRES_HOST=${POSTGRES_HOST_INTERNAL:-supavisor}

# API Key and model for Zep chat history summaries
# OpenAI API key is REQUIRED for Zep to work properly
# ZEP_OPENAI_BASE_URL=http://litellm:4000
ZEP_OPENAI_API_KEY=${OPENAI_API_KEY}
ZEP_MODEL_NAME=gpt-4o-mini

# API token for Zep - can be any string or blank
ZEP_API_SECRET= # Generated by init script

# Neo4j settings used by Zep and Graphiti
ZEP_NEO4J_URI=${NEO4J_URI}
ZEP_NEO4J_USER=${NEO4J_USER}
ZEP_NEO4J_PASSWORD=${NEO4J_PASSWORD}

# Log level for Zep, visible in container logs
# debug, info, warn, error, panic, dpanic, or fatal. Default = info
# ZEP_LOG_LEVEL=debug
# # Log format: json or console. Default = json
# ZEP_LOG_FORMAT=console



# =============================================
# FLOWISE CONFIG
# See
# - services/flowise/docker-compose.yaml
# =============================================

# Postgres settings for Flowise
# If not set, the primary postgres user and password will be used.
FLOWISE_POSTGRES_USER= # Generated by init script
FLOWISE_POSTGRES_PASSWORD= # Generated by init script

# Flowise UI credentials
FLOWISE_USERNAME=admin
FLOWISE_PASSWORD= # Generated by init script



# =============================================
# BROWSER-USE CONFIG
# See
# - services/browser-use/docker-compose.yaml
# - .llemonstack/repos/browser-use-web-ui/.env
# =============================================

# Browser-use LLM API Keys
# If left blank, these can be set in the web UI at runtime
# BROWSER_USE_OPENAI_API_KEY=${OPENAI_API_KEY}
# BROWSER_USE_ANTHROPIC_API_KEY=
# BROWSER_USE_GOOGLE_API_KEY=
# BROWSER_USE_DEEPSEEK_API_KEY=

# Use LiteLLM proxy as the LLM provider
# LiteLLM is configured by default with the OpenAI API key
# Proxying through LiteLLM allows for easy viewing of cost and traces via Langfuse
BROWSER_USE_LITELLM_ENDPOINT=http://litellm:4000
BROWSER_USE_LITELLM_API_KEY=${LITELLM_MASTER_KEY}

# VNC password is used to watch the browser as it's automated.
# Not required to access the browser-use web UI.
# Defaults to "vncpassword" if left blank
BROWSER_USE_VNC_PASSWORD= # Set by init script



# =============================================
# OPENWEBUI CONFIG
# See
# - services/openwebui/docker-compose.yaml
# =============================================

# Optional OpenAI API endpoint
# OpenWebUI already configures Ollama
# To use LM Studio, GPT4All, or similar local LLM providers, set the
# OPENWEBUI_OPENAI_API_BASE_URL to the local or remote LLM endpoint.
# Must be an OpenAI compatible API with CORS enabled since OpenWebUI makes direct
# requests to the LLM provider in the browser.

OPENWEBUI_OPENAI_API_BASE_URL=${LOCAL_LLM_OPENAI_API_BASE_URL:-}
OPENWEBUI_OPENAI_API_KEY=${LOCAL_LLM_OPENAI_API_KEY:-} # Only needed if LLM provider requires an API key

# OpenWebUI log level: debug | info | warning | error | crtical
# See https://docs.python.org/3/library/logging.html
# OPENWEBUI_GLOBAL_LOG_LEVEL=debug



# =============================================
# LITELLM CONFIG
# See
# - services/litellm/docker-compose.yaml
# - services/litellm/config.env
# =============================================

# Log level: DEBUG | INFO | ERROR
LITELLM_LOG_LEVEL=INFO

LITELLM_POSTGRES_USER= # Generated by init script
LITELLM_POSTGRES_PASSWORD= # Generated by init script
LITELLM_POSTGRES_SCHEMA=service_litellm # Generated by init script
LITELLM_DATABASE_URL=postgresql://${LITELLM_POSTGRES_USER}${POSTGRES_USER_TENANT_SUFFIX}:${LITELLM_POSTGRES_PASSWORD}@${POSTGRES_HOST_INTERNAL}:${POSTGRES_PORT}/postgres?schema=${LITELLM_POSTGRES_SCHEMA}

# LiteLLM Master Key
# This key is used by services to access the LiteLLM proxy.
LITELLM_MASTER_KEY= # Generated by init script: sk-*****
LITELLM_SALT_KEY= # Generated by init script

# LiteLLM UI Username and Password
LITELLM_UI_USERNAME=admin
LITELLM_UI_PASSWORD= # Generated by init script

# LLM Provider API Keys
# If left blank, these can be set in the web UI at runtime
LITELLM_OPENAI_API_KEY=${OPENAI_API_KEY}
LITELLM_ANTHROPIC_API_KEY=
LITELLM_GROQ_API_KEY=

# This is the key used by import script to auto populate n8n LiteLLM credentials.
# By default it's set to the master key.
LITELLM_API_KEY=${LITELLM_MASTER_KEY}


# =============================================
# LANGFUSE CONFIG
# See
# - services/langfuse/docker-compose.yaml
# - services/langfuse/config.env
# =============================================

LANGFUSE_POSTGRES_USER= # Generated by init script
LANGFUSE_POSTGRES_PASSWORD= # Generated by init script
LANGFUSE_POSTGRES_SCHEMA=service_langfuse # Generated by init script
LANGFUSE_DATABASE_URL=postgresql://${LANGFUSE_POSTGRES_USER}${POSTGRES_USER_TENANT_SUFFIX}:${LANGFUSE_POSTGRES_PASSWORD}@${POSTGRES_HOST_INTERNAL}:${POSTGRES_PORT}/postgres?schema=${LANGFUSE_POSTGRES_SCHEMA}

LANGFUSE_SALT= # Generated by init script
LANGFUSE_ENCRYPTION_KEY= # Generated by init script
LANGFUSE_INIT_PROJECT_PUBLIC_KEY= # Generated by init script
LANGFUSE_INIT_PROJECT_SECRET_KEY= # Generated by init script
LANGFUSE_INIT_USER_EMAIL=admin@example.com
LANGFUSE_INIT_USER_PASSWORD= # Generated by init script
LANGFUSE_NEXTAUTH_SECRET= # Generated by init script

CLICKHOUSE_PASSWORD= # Generated by init script

REDIS_PASSWORD= # Generated by init script

MINIO_ROOT_PASSWORD= # Generated by init script



# =============================================
# LIGHTRAG CONFIG
# See
# - services/lightrag/docker-compose.yaml
# - services/lightrag/.env
# =============================================

# API token
LIGHTRAG_API_KEY= # Generated by init script

# Postgres settings for LightRAG
LIGHTRAG_POSTGRES_HOST=${POSTGRES_HOST_INTERNAL:-supavisor}
LIGHTRAG_POSTGRES_PORT=${POSTGRES_PORT}
LIGHTRAG_POSTGRES_USER= # Generated by init script
LIGHTRAG_POSTGRES_PASSWORD= # Generated by init script

# Neo4j settings used by LightRAG
LIGHTRAG_NEO4J_URI=${NEO4J_URI}
LIGHTRAG_NEO4J_USER=${NEO4J_USER}
LIGHTRAG_NEO4J_PASSWORD=${NEO4J_PASSWORD}



################################################################################
# END LLEMONSTACK .ENV CONFIG
################################################################################

