# Zep
#
# Zep is a memory layer for AI agents. It can be used as a memory store for
# n8n workflows.
#
# As of March 2025, zepai/zep:latest (1.0.2) is not compatible with n8n.
# This is due to the zep-js package which is a dependency of langchain inside of n8n.
# Once the zep-js package is updated, n8n will work again. In the meantime,
# either downgrade zep to 0.27.2 below or use the Cloud version of Zep in n8n.
#
# See https://github.com/n8n-io/n8n/issues/11120
#
# To check the version of zep-js, run the following in the n8n container:
#
# ```
# # Run in n8n container
# jq -r '.version' /usr/local/lib/node_modules/n8n/node_modules/@getzep/zep-js/package.json
# ```
#
# The eirlier 0.27.2 version of zep does not use a temporal graph database. Graphiti was added
# in September 2024 with Neo4j under the hood to provide better accuracy for chats.
# See https://blog.getzep.com/announcing-zep-community-edition/
#
# Until n8n updates their zep-js package version, the best solution is to use the Cloud version
# of zep with n8n and the local CE version of zep for custom code.
#
# https://www.getzep.com/
#
# Zep service health check:
# http://localhost:8010/healthz

# Zep requires a postgres database.
# include:
#   - docker-compose.supabase.yml

volumes:
  neo4j_data:

services:
  zep:
    image: zepai/zep:latest # 1.0.2 as of March 2025
    # TODO: downgrade to 0.27.2 until langchain and n8n update their zep-js package version
    # https://github.com/getzep/zep/pkgs/container/zep
    # https://github.com/getzep/zep/blob/v0.27.2/docker-compose.yaml
    # image: ghcr.io/getzep/zep:latest # 0.27.2 as of March 2025
    container_name: zep
    ports:
      - "8010:8000"
    volumes:
      - ./zep.yaml:/app/zep.yaml
    environment:
      - ZEP_CONFIG_FILE=zep.yaml
      - POSTGRES_USER=${ZEP_POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${ZEP_POSTGRES_PASSWORD:-${POSTGRES_PASSWORD}}
      - POSTGRES_SCHEMA=${ZEP_POSTGRES_SCHEMA:-public}
      - ZEP_API_SECRET=${ZEP_API_SECRET}
      - ZEP_LOG_LEVEL=${ZEP_LOG_LEVEL:-info}
      - ZEP_LOG_FORMAT=${ZEP_LOG_FORMAT:-console}
      - OPENAI_API_KEY=${ZEP_OPENAI_API_KEY}
      - MODEL_NAME=${ZEP_MODEL_NAME}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    depends_on:
      graphiti:
        condition: service_healthy
      # Only uncomment db depencency health check if include is uncommented above
      # db: # From supabase/docker/docker-compose.yml
      #   condition: service_healthy

  graphiti:
    image: zepai/graphiti:0.3
    container_name: graphiti
    ports:
      - "8003:8003"
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8003/healthcheck')",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - OPENAI_API_KEY=${ZEP_OPENAI_API_KEY}
      - MODEL_NAME=${ZEP_MODEL_NAME}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PORT=8003

  neo4j:
    image: neo4j:5.22.0
    container_name: neo4j
    healthcheck:
      test: wget http://localhost:7687 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}

